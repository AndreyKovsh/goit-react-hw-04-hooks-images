{"version":3,"sources":["services/api-service.js","component/Container/Container.js","component/Searchbar/SearchBar.js","component/ImageGalleryItem/ImageGalleryItem.js","component/ImageGallery/ImageGallery.js","component/Button/Button.js","component/Loader/Loader.js","component/Modal/Modal.js","component/ShowError/ShowError.js","App.js","reportWebVitals.js","index.js"],"names":["apiService","query","page","a","axios","get","data","hits","Container","children","className","Searchbar","onHandleSubmit","useState","setQuery","onSubmit","e","preventDefault","trim","toast","info","type","value","autoComplete","autoFocus","placeholder","onChange","target","ImageGalleryItem","webformatURL","largeImageURL","tags","onOpenModal","src","alt","data-source","onClick","ImageGallery","images","map","id","Button","onLoadMore","LoaderItem","color","height","width","timeout","modalRoot","document","querySelector","Modal","handleKeyDown","code","props","onToggleModal","handleBackdropClick","currentTarget","window","addEventListener","this","removeEventListener","createPortal","Component","ErrorView","error","role","App","setImages","setLargeImageURL","setPage","setError","isLoading","setIsLoading","showModal","setShowModal","useEffect","request","length","prevImages","fetchImages","toggleModal","scrollPage","setTimeout","scrollBy","innerHeight","newSearch","texterror","dataset","source","prevPage","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8bASeA,EAPC,uCAAG,WAAOC,EAAOC,GAAd,iBAAAC,EAAA,sEACMC,IAAMC,IAAN,qCACSJ,EADT,iBACuBC,EADvB,gGADN,uBACTI,EADS,EACTA,KADS,kBAIVA,EAAKC,MAJK,2CAAH,wDCODC,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,qBAAKC,UAAU,YAAf,SAA4BD,M,MCsCjDE,MApCf,YAAwC,IAAnBC,EAAkB,EAAlBA,eAAkB,EACXC,mBAAS,IADE,mBAC9BZ,EAD8B,KACvBa,EADuB,KAWrC,OACE,wBAAQJ,UAAU,YAAlB,SACE,uBAAMA,UAAU,aAAaK,SAVhB,SAAAC,GAEf,GADAA,EAAEC,iBACmB,KAAjBhB,EAAMiB,OACR,OAAOC,IAAMC,KAAK,0CAEpBR,EAAeX,GACfa,EAAS,KAIP,UACE,wBAAQO,KAAK,SAASX,UAAU,qBAAhC,SACE,sBAAMA,UAAU,4BAAhB,sBAGF,uBACEA,UAAU,oBACVW,KAAK,OACLC,MAAOrB,EACPsB,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBb,EAASa,EAAOL,gB,MCPrCM,MApBf,YAA+E,IAAnDC,EAAkD,EAAlDA,aAAcC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAC7D,OACE,oBAAItB,UAAU,mBAAd,SACE,qBACEuB,IAAKJ,EACLK,IAAKH,EACLI,cAAaL,EACbpB,UAAU,yBACV0B,QAASJ,O,MCcFK,MArBf,YAAgD,IAAxBC,EAAuB,EAAvBA,OAAQN,EAAe,EAAfA,YAC9B,OACE,oBAAItB,UAAU,eAAd,SACG4B,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIX,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAApC,OACV,cAAC,EAAD,CAEEF,aAAcA,EACdC,cAAeA,EACfC,KAAMA,EACNC,YAAaA,GAJRQ,S,MCMAC,MAZf,YAAiC,IAAfC,EAAc,EAAdA,WAChB,OACE,wBAAQrB,KAAK,SAASX,UAAU,SAAS0B,QAASM,EAAlD,wB,uBCYWC,MAdf,WACE,OACE,qBAAKjC,UAAU,SAAf,SACE,cAAC,IAAD,CACEW,KAAK,OACLuB,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,O,gCCNXC,G,MAAYC,SAASC,cAAc,iBAyC1BC,E,4MA9BbC,cAAgB,SAAApC,GACC,WAAXA,EAAEqC,MACJ,EAAKC,MAAMC,iB,EAIfC,oBAAsB,SAAAxC,GAChBA,EAAEyC,gBAAkBzC,EAAEW,QACxB,EAAK2B,MAAMC,iB,kEAfbG,OAAOC,iBAAiB,UAAWC,KAAKR,iB,6CAIxCM,OAAOG,oBAAoB,UAAWD,KAAKR,iB,+BAenC,IACAtB,EAAkB8B,KAAKN,MAAvBxB,cAER,OAAOgC,uBACL,qBAAKpD,UAAU,UAAU0B,QAASwB,KAAKJ,oBAAvC,SACE,qBAAK9C,UAAU,QAAf,SACE,qBAAKuB,IAAKH,EAAeI,IAAI,SAGjCc,O,GA9Bce,aCOLC,MAZf,YAA+B,IAAVC,EAAS,EAATA,MACnB,OACE,qBAAKC,KAAK,QAAV,SACE,qEAAwCD,QCsF/BE,MA/Ef,WAAgB,IAAD,EACatD,mBAAS,IADtB,mBACNZ,EADM,KACCa,EADD,OAEeD,mBAAS,IAFxB,mBAENyB,EAFM,KAEE8B,EAFF,OAG6BvD,mBAAS,IAHtC,mBAGNiB,EAHM,KAGSuC,EAHT,OAIWxD,mBAAS,GAJpB,mBAINX,EAJM,KAIAoE,EAJA,OAKazD,mBAAS,MALtB,mBAKNoD,EALM,KAKCM,EALD,OAMqB1D,oBAAS,GAN9B,mBAMN2D,EANM,KAMKC,EANL,OAOqB5D,oBAAS,GAP9B,mBAON6D,EAPM,KAOKC,EAPL,KASbC,qBAAU,WACH3E,GACY,uCAAG,4BAAAE,EAAA,+EAEMH,EAAWC,EAAOC,GAFxB,UAGO,KADjB2E,EAFU,QAGJC,OAHI,yCAIPP,EAAS,6BAAD,OAA8BtE,EAA9B,OAJD,OAMhBmE,GAAU,SAAAW,GAAU,4BAAQA,GAAR,YAAuBF,OAN3B,gDAQhBN,EAAS,oCARO,yBAUhBE,GAAa,GAVG,4EAAH,oDAcjBO,KACC,CAAC9E,EAAMD,IAEV,IAmBMgF,EAAc,WAClBN,GAAcD,IAGVQ,EAAa,WACjBC,YAAW,WACLzB,OAAO0B,SAAS,EAAG1B,OAAO2B,YAAY,OACzC,MAGL,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAWzE,eA/BM,SAAA0E,GACnBxE,EAASwE,GACTlB,EAAU,IACVE,EAAQ,GACRC,EAAS,MACTE,GAAa,MA4BVR,GAAS,cAAC,EAAD,CAAWsB,UAAWtB,IAE/B3B,EAAOwC,OAAS,GACf,cAAC,EAAD,CAAcxC,OAAQA,EAAQN,YAtBhB,SAAAhB,GAClBqD,EAAiBrD,EAAEW,OAAO6D,QAAQC,QAClCR,OAuBGT,GAAa,cAAC,EAAD,KAEZA,GAAalC,EAAOwC,OAAS,GAAK,cAAC,EAAD,CAAQpC,WAjC7B,WACjB+B,GAAa,GACbH,GAAQ,SAAAoB,GAAQ,OAAIA,EAAW,KAC/BR,OAgCGR,GACC,cAAC,EAAD,CAAOnB,cAAe0B,EAAanD,cAAeA,IAEpD,cAAC,IAAD,CAAgB6D,UAAW,WC1ElBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASuD,eAAe,SAM1BZ,M","file":"static/js/main.be764883.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst apiService = async (query, page) => {\n  const { data } = await axios.get(\n    `https://pixabay.com/api/?q=${query}&page=${page}&key=19614355-51590948188acde31377fd3a2&image_type=photo&orientation=horizontal&per_page=12`,\n  );\n  return data.hits;\n};\n\nexport default apiService;\n","import PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';import './SearchBar.css';\nimport PropTypes from 'prop-types';\n\nfunction Searchbar({ onHandleSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      return toast.info('Please enter a value for search images');\n    }\n    onHandleSubmit(query);\n    setQuery('');\n  };\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={onSubmit}>\n        <button type=\"submit\" className=\"SearchForm__button\">\n          <span className=\"SearchForm__button__label\">Search</span>\n        </button>\n\n        <input\n          className=\"SearchForm__input\"\n          type=\"text\"\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={({ target }) => setQuery(target.value)}\n        />\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  onHandleSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import PropTypes from 'prop-types';\nimport './ImageGalleryItem.css';\n\nfunction ImageGalleryItem({ webformatURL, largeImageURL, tags, onOpenModal }) {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={webformatURL}\n        alt={tags}\n        data-source={largeImageURL}\n        className=\"ImageGalleryItem_image\"\n        onClick={onOpenModal}\n      />\n    </li>\n  );\n}\n\nImageGalleryItem.propTypes = {\n  largeImageURL: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n  webformatURL: PropTypes.string.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\nimport './ImageGallery.css';\n\nfunction ImageGallery({ images, onOpenModal }) {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => (\n        <ImageGalleryItem\n          key={id}\n          webformatURL={webformatURL}\n          largeImageURL={largeImageURL}\n          tags={tags}\n          onOpenModal={onOpenModal}\n        />\n      ))}\n    </ul>\n  );\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.array.isRequired,\n  onOpenModal: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","import PropTypes from 'prop-types';\nimport './Button.css';\n\nfunction Button({ onLoadMore }) {\n  return (\n    <button type=\"button\" className=\"Button\" onClick={onLoadMore}>\n      Load more\n    </button>\n  );\n}\n\nButton.propTypes = {\n  onLoadMore: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import Loader from 'react-loader-spinner';\nimport './Loader.css';\n\nfunction LoaderItem() {\n  return (\n    <div className=\"Loader\">\n      <Loader\n        type=\"Grid\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={0}\n      />\n    </div>\n  );\n}\n\nexport default LoaderItem;\n","import { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport './Modal.css';\n\nconst modalRoot = document.querySelector('#modalPortal');\n\nclass Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      this.props.onToggleModal();\n    }\n  };\n\n  handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      this.props.onToggleModal();\n    }\n  };\n\n  render() {\n    const { largeImageURL } = this.props;\n\n    return createPortal(\n      <div className=\"Overlay\" onClick={this.handleBackdropClick}>\n        <div className=\"Modal\">\n          <img src={largeImageURL} alt=\"\" />\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\n\nModal.propTypes = {\n  onToggleModal: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import PropTypes from 'prop-types';\n\nfunction ErrorView({ error }) {\n  return (\n    <div role=\"alert\">\n      <p>Sorry, something went wrong. Error: {error}</p>\n    </div>\n  );\n}\n\nErrorView.propTypes = {\n  error: PropTypes.string.isRequired,\n};\n\nexport default ErrorView;\n","import React, { useState, useEffect } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport apiService from './services/api-service';\nimport Container from './component/Container/Container';\nimport Searchbar from './component/Searchbar/SearchBar';\nimport ImageGallery from './component/ImageGallery/ImageGallery';\nimport Button from './component/Button/Button';\nimport LoaderComponent from './component/Loader/Loader';\nimport Modal from './component/Modal/Modal';\nimport ErrorView from './component/ShowError/ShowError';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [largeImageURL, setLargeImageURL] = useState('');\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    if (!query) return;\n    const fetchImages = async () => {\n      try {\n        const request = await apiService(query, page);\n        if (request.length === 0) {\n          return setError(`No results were found for ${query}!`);\n        }\n        setImages(prevImages => [...prevImages, ...request]);\n      } catch (error) {\n        setError('Something went wrong. Try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchImages();\n  }, [page, query]);\n\n  const searchImages = newSearch => {\n    setQuery(newSearch);\n    setImages([]);\n    setPage(1);\n    setError(null);\n    setIsLoading(true);\n  };\n\n  const onLoadMore = () => {\n    setIsLoading(true);\n    setPage(prevPage => prevPage + 1);\n    scrollPage();\n  };\n\n  const onOpenModal = e => {\n    setLargeImageURL(e.target.dataset.source);\n    toggleModal();\n  };\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const scrollPage = () => {\n    setTimeout(() => {\n          window.scrollBy(0, window.innerHeight+150)\n    }, 1000);\n  };\n\n  return (\n    <Container>\n      <Searchbar onHandleSubmit={searchImages} />\n\n      {error && <ErrorView texterror={error} />}\n\n      {images.length > 0 && (\n        <ImageGallery images={images} onOpenModal={onOpenModal} />\n      )}\n\n      {isLoading && <LoaderComponent />}\n\n      {!isLoading && images.length > 0 && <Button onLoadMore={onLoadMore} />}\n\n      {showModal && (\n        <Modal onToggleModal={toggleModal} largeImageURL={largeImageURL} />\n      )}\n      <ToastContainer autoClose={3700} />\n    </Container>\n  );\n}\n\nexport default App;\n// class App extends Component {\n//   state = {\n//     query: '',\n//     images: [],\n//     largeImageURL: '',\n//     page: 1,\n//     error: null,\n//     isLoading: false,\n//     showModal: false,\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.query !== this.state.query) {\n//       this.setState({ images: [], page: 1, error: null });\n//     }\n//   }\n\n//   searchImages = async () => {\n//     const { query, page } = this.state;\n\n//     if (query.trim() === '') {\n//       return toast.info(' Please enter search query  to find images!');\n//     }\n\n//     this.toggleLoader();\n\n//     try {\n//       const request = await apiService(query, page);\n//       this.setState(({ images, page }) => ({\n//         images: [...images, ...request],\n//         page: page + 1,\n//       }));\n//       if (request.length === 0) {\n//         this.setState({ error: `No results were found for ${query}!` });\n//       }\n//     } catch (error) {\n//       this.setState({ error: 'Something went wrong. Try again.' });\n//     } finally {\n//       this.toggleLoader();\n//     }\n//   };\n\n//   handleChange = e => {\n//     this.setState({ query: e.target.value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.searchImages();\n//   };\n\n//   onLoadMore = () => {\n//     this.searchImages();\n//     this.scrollPage();\n//   };\n\n//   onOpenModal = e => {\n//     this.setState({ largeImageURL: e.target.dataset.source });\n//     this.toggleModal();\n//   };\n\n//   toggleLoader = () => {\n//     this.setState(({ isLoading }) => ({\n//       isLoading: !isLoading,\n//     }));\n//   };\n\n//   toggleModal = () => {\n//     this.setState(({ showModal }) => ({\n//       showModal: !showModal,\n//     }));\n//   };\n\n//   scrollPage = () => {\n//     setTimeout(() => {\n//       window.scrollBy({\n//         top: document.documentElement.clientHeight - 160,\n//         behavior: 'smooth',\n//       });\n//     }, 1000);\n//   };\n\n//   render() {\n//     const {\n//       query,\n//       images,\n//       largeImageURL,\n//       isLoading,\n//       showModal,\n//       error,\n//     } = this.state;\n//     return (\n//       <Container>\n//         <Searchbar\n//           onHandleSubmit={this.handleSubmit}\n//           onSearchQueryChange={this.handleChange}\n//           value={query}\n//         />\n\n//         {error && <ErrorView texterror={error} />}\n\n//         {images.length > 0 && (\n//           <ImageGallery images={images} onOpenModal={this.onOpenModal} />\n//         )}\n\n//         {isLoading && <LoaderComponent />}\n\n//         {!isLoading && images.length > 0 && (\n//           <Button onLoadMore={this.onLoadMore} />\n//         )}\n\n//         {showModal && (\n//           <Modal\n//             onToggleModal={this.toggleModal}\n//             largeImageURL={largeImageURL}\n//           />\n//         )}\n//         <ToastContainer autoClose={3700} />\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}